#include <iostream>
#include <cstdlib>
#include <cmath>
#include <vector>

//This code is for the game "Bulls and Cows" - where a person has to guess a randomly generated number

using namespace std;

void UserInput(unsigned& user_Guess);
int NumberGenerator();
bool CheckUniqueNumber(int number);
void CalculatingDigits(unsigned number, int& d1, int& d2, int& d3, int& d4);
void ComparingNumbers(unsigned user_Num, unsigned program_Num, int& count_Bulls, int& count_Cows);
void GenerateAllCandidates(vector<int>& candidates, int& num_Candidates);
void FilterCandidates(int candidates[], int& num_Candidates, int last_guess, int bulls, int cows);
void BullsAndCowsSummary(int count_Bulls, int count_Cows);


int main()
{
	srand(time(0));
	unsigned int program_Num = 0;				//This will take the value of the number generated by the program
	unsigned int user_Num = 0;				//This will be used by the user to guess the program number

	unsigned int user_Secret_Num = 0;			//This will take the value of the number that the program must guess

	int option = 0;
	int rounds = 0;

	int user_Win = 0;							//Counting User wins
	int program_Win = 0;						//Counting Program wins


	cout << "WELCOME TO THE GAME 'BULLS AND COWS'" << endl << endl;
	cout << "Choose how many games you want to play!" << endl;
	cout << "1. 1 Game" << endl;
	cout << "2. 3 Games out of 5" << endl << endl;
	cin >> option;
	cout << endl;

	//This lets the user to choose how many games they want to play
	switch (option) {
	case 1:
		rounds = 1;
		break;
	case 2:
		rounds = 5;
		break;
	}

	//This generates all possible 4-digit combinations for the program to guess
	vector<int> program_Candidates(5040);
	int num_Candidates = 0;
	GenerateAllCandidates(program_Candidates, num_Candidates);

	while (rounds--) {
		cout << "Enter your secret number that the program should guess: ";
		cin >> user_Secret_Num;


		//This generates the random number for the game
		program_Num = NumberGenerator();

		do {
			int count_Bulls = 0;
			int count_Cows = 0;
			UserInput(user_Num);
			ComparingNumbers(user_Num, program_Num, count_Bulls, count_Cows);
			BullsAndCowsSummary(count_Bulls, count_Cows);

			//Checks if the User guessed the number
			if (count_Bulls == 4) {
				user_Win++;
				cout << "User guessed the correct number!\n";
				cout << "User has " << user_Win << " won game(s)!" << endl;
				break;
			}

			unsigned int program_Guess = program_Candidates[rand() % num_Candidates]; // <-- tuka sme stignali
			cout << "Program's guess: " << program_Guess << endl;


			int program_Bulls = 0, program_Cows = 0;
			ComparingNumbers(program_Guess, user_Secret_Num, program_Bulls, program_Cows);
			cout << "Program has " << program_Bulls << " bull(s) and " << program_Cows << " cow(s)\n" << endl;

			if (program_Bulls == 4) {
				program_Win++;
				cout << "Program guessed the correct number!\n";
				cout << "User has " << user_Win << "won game(s)!";
				break;
			}


		} while (true);

		//This checks who is the winner if the games are 3 out of 5
		if (user_Win == 3) {
			cout << "User have won 3 games! User is the winner!";
			break;
		}
		if (program_Win == 3) {
			cout << "The Program won 3 games! The Program is the winner!";
			break;
		}

	}

}

//This will take the number by the user
void UserInput(unsigned& user_Num) {
	do {
		cout << "Enter your guess: ";
		cin >> user_Num;
	} while (!CheckUniqueNumber(user_Num) || user_Num < 1000 || user_Num > 9999);
}



//Checking if all of the numbers are unique (Do not repeat)
bool CheckUniqueNumber(int number) {
	int d1 = number / 1000;
	int d2 = (number / 100) % 10;
	int d3 = (number / 10) % 10;
	int d4 = number % 10;

	return (d1 != d2 && d1 != d3 && d1 != d4 &&
		d2 != d3 && d2 != d4 &&
		d3 != d4);
}

//This will generate a random number for the game
int NumberGenerator() {
	int number;

	do {
		number = rand() % 9000 + 1000;
	} while (!CheckUniqueNumber(number));

	return number;
}

//Seprates the user number one by one so they can be compared later
void CalculatingDigits(unsigned number, int& d1, int& d2, int& d3, int& d4) {
	d1 = (number / 1000) % 10;
	d2 = (number / 100) % 10;
	d3 = (number / 10) % 10;
	d4 = number % 10;
}

//Compares the program and user numbers
void ComparingNumbers(unsigned user_Num, unsigned program_Num, int& count_Bulls, int& count_Cows) {

	int user_Num_d1 = 0;						//Needed for the separation and comparison of the numbers
	int user_Num_d2 = 0;						//Needed for the separation and comparison of the numbers
	int user_Num_d3 = 0;						//Needed for the separation and comparison of the numbers
	int user_Num_d4 = 0;						//Needed for the separation and comparison of the numbers
	int prog_Num_d1 = 0;						//Needed for the separation and comparison of the numbers
	int prog_Num_d2 = 0;						//Needed for the separation and comparison of the numbers
	int prog_Num_d3 = 0;						//Needed for the separation and comparison of the numbers
	int prog_Num_d4 = 0;						//Needed for the separation and comparison of the numbers

	CalculatingDigits(user_Num, user_Num_d1, user_Num_d2, user_Num_d3, user_Num_d4);
	CalculatingDigits(program_Num, prog_Num_d1, prog_Num_d2, prog_Num_d3, prog_Num_d4);


	//Covers if the first digit of the user and program number are equal
	if (user_Num_d1 == prog_Num_d1)
		count_Bulls++;

	//Covers if the first digit of the user number is equal to any of the other digits from the program number;
	else if (user_Num_d1 == prog_Num_d2 || user_Num_d1 == prog_Num_d3 || user_Num_d1 == prog_Num_d4)
		count_Cows++;

	//Covers if the second digit of the user and program number are equal
	if (user_Num_d2 == prog_Num_d2)
		count_Bulls++;

	//Covers if the second digit of the user number is equal to any of the other digits from the program number
	else if (user_Num_d2 == prog_Num_d1 || user_Num_d2 == prog_Num_d3 || user_Num_d2 == prog_Num_d4)
		count_Cows++;

	//Covers if the third digit of the user and program number are equal
	if (user_Num_d3 == prog_Num_d3)
		count_Bulls++;

	//Covers if the third digit of the user number is equal to any of the other digits from the program number
	else if (user_Num_d3 == prog_Num_d1 || user_Num_d3 == prog_Num_d2 || user_Num_d3 == prog_Num_d4)
		count_Cows++;

	//Covers if the fourth digit of the user and program number are equal
	if (user_Num_d4 == prog_Num_d4)
		count_Bulls++;

	//Covers if the fourth digit of the user number is equal to any of the other digits from the program number
	else if (user_Num_d4 == prog_Num_d1 || user_Num_d4 == prog_Num_d2 || user_Num_d4 == prog_Num_d3)
		count_Cows++;
}

// Generate all unique 4-digit numbers as candidates
void GenerateAllCandidates(vector<int>& candidates, int& num_Candidates) {
	num_Candidates = 0;
	for (int i = 1023; i <= 9876; ++i) {
		if (CheckUniqueNumber(i)) {
			candidates[num_Candidates++] = i;
		}
	}
}

//This leaves the potential numbers that could be guessed by the program
void FilterCandidates(int candidates[], int& num_Candidates, int last_Guess, int bulls, int cows) {
	vector<int> new_candidates(5040);
	int new_count = 0;

	for (int i = 0; i < num_Candidates; ++i) {
		int candidate = candidates[i];
		int temp_bulls = 0;
		int temp_cows = 0;
		ComparingNumbers(candidate, last_Guess, temp_bulls, temp_cows);
		if (temp_bulls == bulls && temp_cows == cows) {
			new_candidates[new_count++] = candidate;
		}
	}
	num_Candidates = new_count;
	for (int i = 0; i < new_count; ++i) candidates[i] = new_candidates[i];
}

//This will update the player on the number of bulls and cows in the number that he has entered
void BullsAndCowsSummary(int count_Bulls, int count_Cows) {
	cout << "You have " << count_Bulls << " bull(s)!" << endl;
	cout << "You have " << count_Cows << " cow(s)!" << endl << endl;
}
